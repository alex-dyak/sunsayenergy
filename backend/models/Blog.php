<?php

namespace backend\models;

use backend\controllers\FileController;
use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "blog".
 *
 * @property integer $id
 * @property string $header
 * @property string $header_ru
 * @property string $header_en
 * @property string $images
 * @property string $description
 * @property string $description_en
 * @property string $description_ru
 * @property string $text
 * @property string $text_ru
 * @property string $text_en
 * @property integer $visible
 * @property string $date
 */
class Blog extends FileUpload
{

    public $imagePreview;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'blog';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['imagePreview'], 'file', 'extensions' => 'png, jpg'],
            [['descriptionSEO', 'descriptionSEO_ru', 'descriptionSEO_en', 'title', 'title_ru', 'title_en', 'header', 'header_ru', 'header_en', 'description', 'description_en', 'description_ru', 'text', 'text_ru', 'text_en', 'symbol'], 'string'],
            [['visible'], 'integer'],
            [['date'], 'safe'],
            [['header'], 'required'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'symbol' => 'Символьный код страницы(Если оставить пустым генерируеться автоматически)',
            'header' => 'Заголовок',
            'header_ru' => 'Заголовок [Ru]',
            'header_en' => 'Заголовок [En]',
            'imagePreview' => 'Картинка',
            'descriptionSEO' => 'description',
            'descriptionSEO_ru' => 'description_ru',
            'descriptionSEO_en' => 'description_en',
            'description' => 'Описание',
            'description_en' => 'Описание [En]',
            'description_ru' => 'Описание [Ru]',
            'text' => 'Текст статьи',
            'text_ru' => 'Текст статьи [Ru]',
            'text_en' => 'Текст статьи [En]',
            'visible' => 'Отображать',
            'date' => 'Дата создания',
        ];
    }

    public function beforeSave($insert)
    {

        if ($this->symbol == '') {
            $this->symbol = $this->str2url($this->header);
        } else {
            $this->symbol = trim($this->symbol);
        }

        if ($this->date == '') {
            $this->date = date('d.m.y');
        } else {
            $this->date = trim($this->date);
        }

        $this->imagePreview = UploadedFile::getInstance($this, 'imagePreview');

        if ($this->images == null) {
            $this->images = [
                "imagePreview" => ""
            ];
            $this->images = json_encode($this->images);
            $this->images = json_decode($this->images);
        }

        if ($this->imagePreview) {
            $name = $this->generateName() . '.' . $this->imagePreview->extension;
            $this->imagePreview->saveAs(Yii::getAlias("@frontend") . '/web/images/' . $name);
            $this->images->imagePreview = $name;
        }
        $this->images = json_encode($this->images);


        $cache = Yii::$app->cache;
        $key = "update_time";
        $cache->set($key, time());



        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        $this->images = json_decode($this->images);

        if (Yii::$app->language == 'ru') {
            $this->text = $this->text_ru;
            $this->title = $this->title_ru;
            $this->description = $this->description_ru;
            $this->header = $this->header_ru;
            $this->descriptionSEO = $this->descriptionSEO_ru;
        }

        if (Yii::$app->language == 'en') {
            $this->text = $this->text_en;
            $this->title = $this->title_en;
            $this->description = $this->description_en;
            $this->header = $this->header_en;
            $this->descriptionSEO = $this->descriptionSEO_en;
        }

        parent::afterFind(); // TODO: Change the autogenerated stub
    }


    private function rus2translit($string)
    {

        $converter = array(
            'а' => 'a', 'б' => 'b', 'в' => 'v',
            'г' => 'g', 'д' => 'd', 'е' => 'e',
            'ё' => 'e', 'ж' => 'zh', 'з' => 'z',
            'и' => 'i', 'й' => 'y', 'к' => 'k',
            'л' => 'l', 'м' => 'm', 'н' => 'n',
            'о' => 'o', 'п' => 'p', 'р' => 'r',
            'с' => 's', 'т' => 't', 'у' => 'u',
            'ф' => 'f', 'х' => 'h', 'ц' => 'c',
            'ч' => 'ch', 'ш' => 'sh', 'щ' => 'sch',
            'ь' => '\'', 'ы' => 'y', 'ъ' => '\'',
            'э' => 'e', 'ю' => 'yu', 'я' => 'ya',

            'ґ' => 'g', 'є' => 'ie', 'ї' => 'yi',
            'і' => 'i',

            'А' => 'A', 'Б' => 'B', 'В' => 'V',
            'Г' => 'G', 'Д' => 'D', 'Е' => 'E',
            'Ё' => 'E', 'Ж' => 'Zh', 'З' => 'Z',
            'И' => 'I', 'Й' => 'Y', 'К' => 'K',
            'Л' => 'L', 'М' => 'M', 'Н' => 'N',
            'О' => 'O', 'П' => 'P', 'Р' => 'R',
            'С' => 'S', 'Т' => 'T', 'У' => 'U',
            'Ф' => 'F', 'Х' => 'H', 'Ц' => 'C',
            'Ч' => 'Ch', 'Ш' => 'Sh', 'Щ' => 'Sch',
            'Ь' => '\'', 'Ы' => 'Y', 'Ъ' => '\'',
            'Э' => 'E', 'Ю' => 'Yu', 'Я' => 'Ya',

            'Ґ' => 'G', 'Є' => 'Ye', 'Ї' => 'Yi',
            'І' => 'I',

        );

        return strtr($string, $converter);
    }

    protected function str2url($str)
    {
        // переводим в транслит
        $str = $this->rus2translit($str);
        // в нижний регистр
        $str = strtolower($str);
        // заменям все ненужное нам на "-"
        $str = preg_replace('~[^-a-z0-9_]+~u', '-', $str);
        // удаляем начальные и конечные '-'
        $str = trim($str, "-");

        return $str;
    }


}
